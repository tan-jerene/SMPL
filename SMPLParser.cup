package hpl.lang;


import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* Preliminaries to set up and use the scanner.  */
action code {:          :};

parser code {:
		HPLLexer lexer;

		public HPLParser(HPLLexer l) {
                    super(l);
                    lexer = l;
                }

		public HPLParser(String file) throws FileNotFoundException {
	            this(new HPLLexer(new FileReader(file)));
		}

                public HPLParser(InputStream is) {
                    this(new HPLLexer(is));
                }

		public void report_error(String message, Object info) {
		    System.err.println(message + info);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error while reading: ", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
		// No longer necessary		
	  :};
scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token at line: " + 
                                lexer.getLine() + ", char: " + lexer.getChar());
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  :};

/* Terminals (tokens returned by the scanner). */

/* Keywords */
terminal ASSIGN;
terminal LET, WAIT;

/* Arithmetic operators */ 
terminal PLUS, MINUS, TIMES, DIV, MOD;
/* Punctuation */
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, SEMI, COMMA, COLON, IN, IF, THEN;

terminal Integer INTEGER;
terminal Double FRACTION;
terminal Double REAL;
terminal String VAR;
terminal String STRING;

/* Non terminals */
non terminal SMPLProgram program;

non terminal SMPLSequence stmtList;
non terminal SMPLStatement stmt;
non terminal SMPLStatement waitStmt;
non terminal SMPLPaintStmt paintStmt;

non terminal ASTExp expression;
non terminal ASTExp<AIRExp> term;
non terminal ASTExp<AIRExp> power;
non terminal ASTExp<AIRExp> factor;

non terminal ArrayList<ASTExp> expList;   /* non-empty exp list */
non terminal ArrayList<ASTExp> expListE;   /* potentially empty exp list */

non terminal SMPLFunDef funDef;
non terminal SMPLFrameExp subFrameExp;

non terminal ArrayList<String> paramList;
non terminal ArrayList<String> paramListE;
non terminal empty;

/* Grammar rules */

start with program;

program ::= stmtList:seq {:
		RESULT = new SMPLProgram(seq);
	    :};

stmtList ::= stmtList:seq stmt:s {: 
				seq.addStatement(s);
		    	RESULT = seq; :} |
	         empty {: RESULT = new SMPLSequence(); :};

stmt ::=   assignment:a {: RESULT = a; :} |
		   waitStmt:w {: RESULT = w; :} |
		   expression:e {: RESULT = e:};

waitStmt ::= WAIT arithExp:t {: RESULT = new SMPLWaitStmt(t); :};

assignment ::= VAR:v ASSIGN comparison:c {:RESULT = new ExpAssign(v, c); :};

/**********************CONDITIONAL FUNCTIONALITY*********************/
ifstatement ::= IF comparison:c THEN stmtList:s { new SMPLBooleanOp(c, s); } |
				IF comparison:c THEN stmtList:s ELSE stmtList:l {: RESULT = new SMPLBooleanOp(c, s, l); };

comparison ::= comparison:c CMP:m expression:e {: RESULT = new SMPLBooleanExp(m, c, e); } |
			   LPAREN comparison:c RPAREN {: RESULT = c; :} |
			   expression:e {: RESULT = e; :};

expression ::=  expression:e PLUS term:t {: RESULT = new ASTBinaryExp<AIRExp>("+", e, t); :} |
				expression:e MINUS term:t {: RESULT = new ASTBinaryExp<AIRExp>("-", e, t); :} |
				STRING:str {: RESULT = s :} | //For String assignment
	        	LPAREN expression:e RPAREN {: RESULT = e; :} |
	   			funCall:s {: RESULT = s; :}; //Editted:- 14/12/2015_7:39pm

term ::= term:t TIMES power:f {: RESULT = new ASTBinaryExp<AIRExp>("*", e, t); :} |
		 term:t DIV power:f {: RESULT = new ASTBinaryExp<AIRExp>("/", e, t); :} |
		 term:t MOD power:f {: RESULT = new ASTBinaryExp<AIRExp>("%", e, t); :} |
		 power:p {: RESULT = p; :}; //Editted:- 14/12/2015_6:30pm

power ::= power:p POW factor:f {: RESULT = new ASTBinaryExp<AIRExp>("^", e, t); :} |
		  factor:f {:RESULT = f; :}; //Editted:- 14/12/2015_6:30pm

factor ::= INTEGER:int {: RESULT = int; :} |
		   FRACTION:frac {: RESULT = frac; :} |
		   REAL:rl {:RESULT = rl; :} |
		   LPAREN MINUS factor:f RPAREN {: RESULT = new ASTBinaryOperator("-", new AIRExpInt(0), f) :} ; //Editted:- 14/12/2015_7:20pm

/*
	** FUNCTION CALL SECTION
	   NON-TERMINAL USED:
	   String VAR
	   ArrayList<ASTExp> expListE
	**
*/
funCall ::= VAR:name LPAREN expListE:p RPAREN {:
		RESULT = new SMPLFunCall(name, p); :} ; //

/* 
   	** FUNCTION DEFINITION SECTION 
       NON-TERMINALS USED:         
       String VAR                  
       ArrayList<String> paramListE
       SMPLSequence stmtList       
       Last editted:- 14/12/2015_5:00pm
   	**
*/

funDef ::= DEF VAR:name PROC LPAREN paramListE:p RPAREN LCBRACKET stmtList:s RCBRACKET {:
			RESULT = new SMPLFunDef(name, p, s);
		  :} ; 


paramListE ::= paramList:lst {: RESULT = lst; :} |
	       empty {: RESULT = new ArrayList<>(); :} ;

paramList ::= paramList:lst COMMA VAR:id {:
		lst.add(id);
		RESULT = lst; :} |
	      VAR:id {:
		RESULT = new ArrayList<>();
		RESULT.add(id);
	      :};

expList ::= expList:lst COMMA exp:e {:
	          lst.add(e);
		  RESULT = lst;
	     :} |
	     exp:e {:
		  RESULT = new ArrayList<>();
		  RESULT.add(e);
	     :}; 

expListE ::= expList:lst {: RESULT = lst; :} |
	      empty {: RESULT = new ArrayList<>(); :}; 

empty ::= ;
