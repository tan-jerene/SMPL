
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 20 17:58:30 PST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 20 17:58:30 PST 2015
  */
public class SMPLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\006\006\000\002\010\005\000" +
    "\002\010\005\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\017\010\000\002\020\004\000" +
    "\002\021\004\000\002\022\006\000\002\022\005\000\002" +
    "\023\010\000\002\024\010\000\002\025\012\000\002\014" +
    "\005\000\002\014\003\000\002\015\005\000\002\015\003" +
    "\000\002\016\004\000\002\016\003\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\003\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\003\000\002\027\005" +
    "\000\002\027\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\006\000\002\034\006\000\002\033\013\000\002\033" +
    "\012\000\002\036\003\000\002\036\003\000\002\035\005" +
    "\000\002\035\003\000\002\031\005\000\002\031\003\000" +
    "\002\032\003\000\002\032\003\000\002\037\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\014\002\uffc2\026\uffc2\030\uffc2\031\uffc2\056" +
    "\uffc2\001\002\000\004\002\200\001\002\000\020\002\ufffe" +
    "\021\ufffe\022\ufffe\026\ufffe\030\ufffe\031\ufffe\056\ufffe\001" +
    "\002\000\014\002\000\026\012\030\011\031\016\056\010" +
    "\001\002\000\020\002\ufffb\021\ufffb\022\ufffb\026\ufffb\030" +
    "\ufffb\031\ufffb\056\ufffb\001\002\000\004\004\175\001\002" +
    "\000\042\014\034\016\035\032\057\033\040\034\041\035" +
    "\025\037\054\040\024\046\031\051\052\052\017\053\030" +
    "\054\055\055\053\056\056\057\042\001\002\000\004\056" +
    "\154\001\002\000\020\002\ufffc\021\ufffc\022\ufffc\026\ufffc" +
    "\030\ufffc\031\ufffc\056\ufffc\001\002\000\020\002\uffff\021" +
    "\uffff\022\uffff\026\uffff\030\uffff\031\uffff\056\uffff\001\002" +
    "\000\020\002\ufffd\021\ufffd\022\ufffd\026\ufffd\030\ufffd\031" +
    "\ufffd\056\ufffd\001\002\000\042\014\034\016\035\032\057" +
    "\033\040\034\041\035\025\037\054\040\024\046\031\051" +
    "\052\052\017\053\030\054\055\055\053\056\056\057\042" +
    "\001\002\000\034\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\015\uffd0\017\uffd0\022\uffd0\023\uffd0\041\uffd0\045\uffd0" +
    "\047\uffd0\050\uffd0\001\002\000\010\015\ufff7\022\ufff7\023" +
    "\ufff7\001\002\000\010\015\ufff2\022\ufff2\023\ufff2\001\002" +
    "\000\014\015\uffe4\022\uffe4\023\uffe4\047\152\050\uffe4\001" +
    "\002\000\012\015\ufff0\022\ufff0\023\ufff0\050\150\001\002" +
    "\000\004\014\137\001\002\000\004\014\134\001\002\000" +
    "\010\015\ufff1\022\ufff1\023\ufff1\001\002\000\010\015\ufff4" +
    "\022\ufff4\023\ufff4\001\002\000\034\007\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\015\uffcf\017\uffcf\022\uffcf\023\uffcf" +
    "\041\uffcf\045\uffcf\047\uffcf\050\uffcf\001\002\000\016\014" +
    "\034\051\052\052\017\053\030\054\055\055\053\001\002" +
    "\000\010\015\ufff3\022\ufff3\023\ufff3\001\002\000\004\022" +
    "\132\001\002\000\020\010\077\014\034\051\052\052\017" +
    "\053\030\054\055\055\053\001\002\000\016\014\034\051" +
    "\052\052\017\053\030\054\055\055\053\001\002\000\010" +
    "\015\ufff5\022\ufff5\023\ufff5\001\002\000\034\007\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\015\uffd6\017\uffd6\022\uffd6" +
    "\023\uffd6\041\111\045\uffd6\047\uffd6\050\uffd6\001\002\000" +
    "\042\014\034\016\035\032\057\033\040\034\041\035\025" +
    "\037\054\040\024\046\031\051\052\052\017\053\030\054" +
    "\055\055\053\056\056\057\042\001\002\000\042\014\034" +
    "\016\035\032\057\033\040\034\041\035\025\037\054\040" +
    "\024\046\031\051\052\052\017\053\030\054\055\055\053" +
    "\056\056\057\042\001\002\000\010\015\uffef\022\uffef\023" +
    "\uffef\001\002\000\010\015\ufff6\022\ufff6\023\ufff6\001\002" +
    "\000\024\007\102\010\103\015\uffdd\017\uffdd\022\uffdd\023" +
    "\uffdd\045\uffdd\047\uffdd\050\uffdd\001\002\000\034\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4\017\uffd4\022" +
    "\uffd4\023\uffd4\041\uffd4\045\uffd4\047\uffd4\050\uffd4\001\002" +
    "\000\032\007\uffda\010\uffda\011\107\012\106\013\105\015" +
    "\uffda\017\uffda\022\uffda\023\uffda\045\uffda\047\uffda\050\uffda" +
    "\001\002\000\016\015\uffe0\022\uffe0\023\uffe0\045\074\047" +
    "\uffe0\050\uffe0\001\002\000\014\015\uffe2\022\uffe2\023\uffe2" +
    "\047\uffe2\050\uffe2\001\002\000\010\015\uffee\022\uffee\023" +
    "\uffee\001\002\000\034\007\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\015\uffd3\017\uffd3\022\uffd3\023\uffd3\041\uffd3\045" +
    "\uffd3\047\uffd3\050\uffd3\001\002\000\034\007\uffd1\010\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\015\uffd1\017\uffd1\022\uffd1\023" +
    "\uffd1\041\uffd1\045\uffd1\047\uffd1\050\uffd1\001\002\000\004" +
    "\014\117\001\002\000\034\007\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\015\uffd2\017\uffd2\022\uffd2\023\uffd2\041\uffd2" +
    "\045\uffd2\047\uffd2\050\uffd2\001\002\000\004\014\065\001" +
    "\002\000\004\014\060\001\002\000\042\014\034\016\035" +
    "\032\057\033\040\034\041\035\025\037\054\040\024\046" +
    "\031\051\052\052\017\053\030\054\055\055\053\056\056" +
    "\057\042\001\002\000\004\023\062\001\002\000\042\014" +
    "\034\016\035\032\057\033\040\034\041\035\025\037\054" +
    "\040\024\046\031\051\052\052\017\053\030\054\055\055" +
    "\053\056\056\057\042\001\002\000\004\015\064\001\002" +
    "\000\010\015\uffed\022\uffed\023\uffed\001\002\000\020\014" +
    "\034\015\uffc2\051\052\052\017\053\030\054\055\055\053" +
    "\001\002\000\004\015\116\001\002\000\012\015\uffc5\017" +
    "\uffc5\023\uffc5\045\074\001\002\000\004\015\uffc3\001\002" +
    "\000\006\015\uffc4\023\072\001\002\000\016\014\034\051" +
    "\052\052\017\053\030\054\055\055\053\001\002\000\012" +
    "\015\uffc6\017\uffc6\023\uffc6\045\074\001\002\000\016\014" +
    "\076\051\052\052\017\053\030\054\055\055\053\001\002" +
    "\000\024\007\102\010\103\015\uffdf\017\uffdf\022\uffdf\023" +
    "\uffdf\045\uffdf\047\uffdf\050\uffdf\001\002\000\004\010\077" +
    "\001\002\000\016\014\076\051\052\052\017\053\030\054" +
    "\055\055\053\001\002\000\004\015\101\001\002\000\034" +
    "\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\015\uffce\017" +
    "\uffce\022\uffce\023\uffce\041\uffce\045\uffce\047\uffce\050\uffce" +
    "\001\002\000\016\014\076\051\052\052\017\053\030\054" +
    "\055\055\053\001\002\000\016\014\076\051\052\052\017" +
    "\053\030\054\055\055\053\001\002\000\032\007\uffdb\010" +
    "\uffdb\011\107\012\106\013\105\015\uffdb\017\uffdb\022\uffdb" +
    "\023\uffdb\045\uffdb\047\uffdb\050\uffdb\001\002\000\016\014" +
    "\076\051\052\052\017\053\030\054\055\055\053\001\002" +
    "\000\016\014\076\051\052\052\017\053\030\054\055\055" +
    "\053\001\002\000\016\014\076\051\052\052\017\053\030" +
    "\054\055\055\053\001\002\000\034\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\015\uffd9\017\uffd9\022\uffd9\023\uffd9" +
    "\041\111\045\uffd9\047\uffd9\050\uffd9\001\002\000\016\014" +
    "\076\051\052\052\017\053\030\054\055\055\053\001\002" +
    "\000\034\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\015" +
    "\uffd5\017\uffd5\022\uffd5\023\uffd5\041\uffd5\045\uffd5\047\uffd5" +
    "\050\uffd5\001\002\000\034\007\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\015\uffd8\017\uffd8\022\uffd8\023\uffd8\041\111" +
    "\045\uffd8\047\uffd8\050\uffd8\001\002\000\034\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\015\uffd7\017\uffd7\022\uffd7" +
    "\023\uffd7\041\111\045\uffd7\047\uffd7\050\uffd7\001\002\000" +
    "\032\007\uffdc\010\uffdc\011\107\012\106\013\105\015\uffdc" +
    "\017\uffdc\022\uffdc\023\uffdc\045\uffdc\047\uffdc\050\uffdc\001" +
    "\002\000\010\015\uffcd\022\uffcd\023\uffcd\001\002\000\042" +
    "\014\034\016\035\032\057\033\040\034\041\035\025\037" +
    "\054\040\024\046\031\051\052\052\017\053\030\054\055" +
    "\055\053\056\056\057\042\001\002\000\004\023\121\001" +
    "\002\000\042\014\034\016\035\032\057\033\040\034\041" +
    "\035\025\037\054\040\024\046\031\051\052\052\017\053" +
    "\030\054\055\055\053\056\056\057\042\001\002\000\004" +
    "\015\123\001\002\000\010\015\uffe8\022\uffe8\023\uffe8\001" +
    "\002\000\010\015\uffeb\022\uffeb\023\uffeb\001\002\000\010" +
    "\015\uffec\022\uffec\023\uffec\001\002\000\006\017\127\023" +
    "\072\001\002\000\010\015\uffe9\022\uffe9\023\uffe9\001\002" +
    "\000\006\015\131\045\074\001\002\000\020\015\uffde\017" +
    "\uffde\022\uffde\023\uffde\045\uffde\047\uffde\050\uffde\001\002" +
    "\000\020\002\ufff8\021\ufff8\022\ufff8\026\ufff8\030\ufff8\031" +
    "\ufff8\056\ufff8\001\002\000\016\015\uffe1\022\uffe1\023\uffe1" +
    "\045\074\047\uffe1\050\uffe1\001\002\000\016\014\034\051" +
    "\052\052\017\053\030\054\055\055\053\001\002\000\006" +
    "\015\136\023\072\001\002\000\010\015\uffea\022\uffea\023" +
    "\uffea\001\002\000\042\014\034\016\035\032\057\033\040" +
    "\034\041\035\025\037\054\040\024\046\031\051\052\052" +
    "\017\053\030\054\055\055\053\056\056\057\042\001\002" +
    "\000\004\023\141\001\002\000\042\014\034\016\035\032" +
    "\057\033\040\034\041\035\025\037\054\040\024\046\031" +
    "\051\143\052\017\053\030\054\055\055\053\056\056\057" +
    "\042\001\002\000\004\015\147\001\002\000\030\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\015\uffd3\023\144\041" +
    "\uffd3\045\uffd3\047\uffd3\050\uffd3\001\002\000\004\051\145" +
    "\001\002\000\004\015\146\001\002\000\010\015\uffe6\022" +
    "\uffe6\023\uffe6\001\002\000\010\015\uffe7\022\uffe7\023\uffe7" +
    "\001\002\000\020\014\034\046\031\051\052\052\017\053" +
    "\030\054\055\055\053\001\002\000\014\015\uffe5\022\uffe5" +
    "\023\uffe5\047\152\050\uffe5\001\002\000\020\014\034\046" +
    "\031\051\052\052\017\053\030\054\055\055\053\001\002" +
    "\000\014\015\uffe3\022\uffe3\023\uffe3\047\uffe3\050\uffe3\001" +
    "\002\000\004\027\155\001\002\000\004\014\156\001\002" +
    "\000\006\015\uffc2\056\157\001\002\000\006\015\uffc7\023" +
    "\uffc7\001\002\000\006\015\uffca\023\171\001\002\000\004" +
    "\015\163\001\002\000\004\015\uffc9\001\002\000\016\020" +
    "\164\022\uffc2\026\uffc2\030\uffc2\031\uffc2\056\uffc2\001\002" +
    "\000\014\021\uffc2\026\uffc2\030\uffc2\031\uffc2\056\uffc2\001" +
    "\002\000\014\022\166\026\012\030\011\031\016\056\010" +
    "\001\002\000\020\002\uffcb\021\uffcb\022\uffcb\026\uffcb\030" +
    "\uffcb\031\uffcb\056\uffcb\001\002\000\014\021\170\026\012" +
    "\030\011\031\016\056\010\001\002\000\020\002\uffcc\021" +
    "\uffcc\022\uffcc\026\uffcc\030\uffcc\031\uffcc\056\uffcc\001\002" +
    "\000\004\056\172\001\002\000\006\015\uffc8\023\uffc8\001" +
    "\002\000\004\022\174\001\002\000\020\002\ufff9\021\ufff9" +
    "\022\ufff9\026\ufff9\030\ufff9\031\ufff9\056\ufff9\001\002\000" +
    "\042\014\034\016\035\032\057\033\040\034\041\035\025" +
    "\037\054\040\024\046\031\051\052\052\017\053\030\054" +
    "\055\055\053\056\056\057\042\001\002\000\004\022\177" +
    "\001\002\000\020\002\ufffa\021\ufffa\022\ufffa\026\ufffa\030" +
    "\ufffa\031\ufffa\056\ufffa\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\010\002\003\003\005\037\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\013\006\014" +
    "\010\012\033\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\011\172\012\043\013\046\014\022\015\021" +
    "\016\047\017\017\020\042\021\035\022\026\023\031\024" +
    "\020\025\025\026\045\027\036\030\044\034\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\011\032\012\043\013\046\014\022" +
    "\015\021\016\047\017\017\020\042\021\035\022\026\023" +
    "\031\024\020\025\025\026\045\027\036\030\044\034\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\043\013\132\026\045\027\036" +
    "\030\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\043\013\127\026\045\027\036\030\044\001\001" +
    "\000\016\012\043\013\066\026\045\027\036\030\044\031" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\124\012\043\013\046\014\022\015\021\016\047\017" +
    "\017\020\042\021\035\022\026\023\031\024\020\025\025" +
    "\026\045\027\036\030\044\034\050\001\001\000\044\011" +
    "\123\012\043\013\046\014\022\015\021\016\047\017\017" +
    "\020\042\021\035\022\026\023\031\024\020\025\025\026" +
    "\045\027\036\030\044\034\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\060\012\043\013\046\014\022\015\021\016" +
    "\047\017\017\020\042\021\035\022\026\023\031\024\020" +
    "\025\025\026\045\027\036\030\044\034\050\001\001\000" +
    "\002\001\001\000\044\011\062\012\043\013\046\014\022" +
    "\015\021\016\047\017\017\020\042\021\035\022\026\023" +
    "\031\024\020\025\025\026\045\027\036\030\044\034\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\012" +
    "\043\013\066\026\045\027\036\030\044\031\070\032\065" +
    "\037\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\043\013\072" +
    "\026\045\027\036\030\044\001\001\000\002\001\001\000" +
    "\012\012\074\026\045\027\036\030\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\114\027\036" +
    "\030\044\001\001\000\010\026\103\027\036\030\044\001" +
    "\001\000\002\001\001\000\006\027\113\030\044\001\001" +
    "\000\006\027\112\030\044\001\001\000\006\027\107\030" +
    "\044\001\001\000\002\001\001\000\004\030\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\117\012\043" +
    "\013\046\014\022\015\021\016\047\017\017\020\042\021" +
    "\035\022\026\023\031\024\020\025\025\026\045\027\036" +
    "\030\044\034\050\001\001\000\002\001\001\000\044\011" +
    "\121\012\043\013\046\014\022\015\021\016\047\017\017" +
    "\020\042\021\035\022\026\023\031\024\020\025\025\026" +
    "\045\027\036\030\044\034\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\043\013\066\026\045\027\036\030\044\031\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\011\137\012" +
    "\043\013\046\014\022\015\021\016\047\017\017\020\042" +
    "\021\035\022\026\023\031\024\020\025\025\026\045\027" +
    "\036\030\044\034\050\001\001\000\002\001\001\000\044" +
    "\011\141\012\043\013\046\014\022\015\021\016\047\017" +
    "\017\020\042\021\035\022\026\023\031\024\020\025\025" +
    "\026\045\027\036\030\044\034\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\012\043\013" +
    "\046\015\150\016\047\026\045\027\036\030\044\001\001" +
    "\000\002\001\001\000\016\012\043\013\046\016\152\026" +
    "\045\027\036\030\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\035\157\036\160\037" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\164\037\004\001" +
    "\001\000\006\003\166\037\004\001\001\000\012\004\013" +
    "\006\014\010\012\033\006\001\001\000\002\001\001\000" +
    "\012\004\013\006\014\010\012\033\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\011\175\012\043\013\046" +
    "\014\022\015\021\016\047\017\017\020\042\021\035\022" +
    "\026\023\031\024\020\025\025\026\045\027\036\030\044" +
    "\034\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

		// No longer necessary		
	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token at line: " + 
                                lexer.getLine() + ", char: " + lexer.getChar());
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
                    super(l);
                    lexer = l;
                }

		public SMPLParser(String file) throws FileNotFoundException {
	            this(new HPLLexer(new FileReader(file)));
		}

                public SMPLParser(InputStream is) {
                    this(new SMPLLexer(is));
                }

		public void report_error(String message, Object info) {
		    System.err.println(message + info);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error while reading: ", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SMPLParser$actions {

          
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expListE ::= empty 
            {
              ArrayList<ASTExp> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListE",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expListE ::= expList 
            {
              ArrayList<ASTExp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<ASTExp> lst = (ArrayList<ASTExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListE",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expList ::= cmpExp 
            {
              ArrayList<ASTExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTCmpBinaryExp<AIRExp> e = (ASTCmpBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		  RESULT = new ArrayList<>();
		  RESULT.add(e);
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expList ::= expList COMMA cmpExp 
            {
              ArrayList<ASTExp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<ASTExp> lst = (ArrayList<ASTExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTCmpBinaryExp<AIRExp> e = (ASTCmpBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
	          lst.add(e);
		  RESULT = lst;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ArrayList<>();
		RESULT.add(id);
	      
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		lst.add(id);
		RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funDef ::= DEF VAR PROC LPAREN paramListE RPAREN stmtList SEMI 
            {
              SMPLFunDef RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLSequence s = (SMPLSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			RESULT = new SMPLFunDef(name, p, s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funDef",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funDef ::= DEF VAR PROC LPAREN paramListE RPAREN LCBRACKET stmtList RCBRACKET 
            {
              SMPLFunDef RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLSequence s = (SMPLSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			RESULT = new SMPLFunDef(name, p, s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funDef",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-8)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funCall ::= VAR LPAREN expListE RPAREN 
            {
              SMPLFunCall RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<ASTExp> p = (ArrayList<ASTExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
		RESULT = new SMPLFunCall(name, p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= LPAREN MINUS factor RPAREN 
            {
              ASTExp<AIRExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTBinaryExp<AIRExp>("-", new AIRExpInt(0), f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= BININT 
            {
              ASTExp<AIRExp> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= HEXINT 
            {
              ASTExp<AIRExp> RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = h; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= REAL 
            {
              ASTExp<AIRExp> RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double rl = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		RESULT = rl; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= FRACTION 
            {
              ASTExp<AIRExp> RESULT =null;
		int fracleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fracright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double frac = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = frac; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= INTEGER 
            {
              ASTExp<AIRExp> RESULT =null;
		int intleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int intright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer int = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = int; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // power ::= factor 
            {
              ASTExp<AIRExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("power",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // power ::= power POW factor 
            {
              ASTExp<AIRExp> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<AIRExp> p = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("^", e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("power",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // term ::= power 
            {
              ASTExp<AIRExp> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> p = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // term ::= term MOD power 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("%", e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // term ::= term DIV power 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("/", e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // term ::= term TIMES power 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("*", e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= term 
            {
              ASTBinaryExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression MINUS term 
            {
              ASTBinaryExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTBinaryExp<AIRExp> e = (ASTBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("-", e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression PLUS term 
            {
              ASTBinaryExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTBinaryExp<AIRExp> e = (ASTBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("+", e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cmpExp ::= expression 
            {
              ASTCmpBinaryExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTBinaryExp<AIRExp> e = (ASTBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cmpExp",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cmpExp ::= LPAREN cmpExp RPAREN 
            {
              ASTCmpBinaryExp<AIRExp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTCmpBinaryExp<AIRExp> c = (ASTCmpBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cmpExp",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cmpExp ::= cmpExp CMP expression 
            {
              ASTCmpBinaryExp<AIRExp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTCmpBinaryExp<AIRExp> c = (ASTCmpBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTBinaryExp<AIRExp> e = (ASTBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTCmpBinaryExp<AIRExp>(c, m, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cmpExp",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // notStmt ::= cmpExp 
            {
              ASTLogBinaryExp<AIRExp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTCmpBinaryExp<AIRExp> c = (ASTCmpBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("notStmt",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // notStmt ::= NOT cmpExp 
            {
              ASTLogBinaryExp<AIRExp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTCmpBinaryExp<AIRExp> c = (ASTCmpBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTUnaryExp<AIRExp>("not", e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("notStmt",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // andStmt ::= notStmt 
            {
              ASTLogBinaryExp<AIRExp> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTLogBinaryExp<AIRExp> n = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = n; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("andStmt",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // andStmt ::= andStmt AND notStmt 
            {
              ASTLogBinaryExp<AIRExp> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTLogBinaryExp<AIRExp> a = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTLogBinaryExp<AIRExp> n = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTLogBinaryExp<AIRExp>(a, "and", n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("andStmt",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // orStmt ::= andStmt 
            {
              ASTLogBinaryExp<AIRExp> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTLogBinaryExp<AIRExp> a = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("orStmt",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // orStmt ::= orStmt OR andStmt 
            {
              ASTLogBinaryExp<AIRExp> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTLogBinaryExp<AIRExp> o = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTLogBinaryExp<AIRExp> a = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTLogBinaryExp<AIRExp>(o, "or", a); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("orStmt",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // substrExp ::= EQUAL LPAREN tlExp COMMA INTEGER COMMA INTEGER RPAREN 
            {
              ASTSubstrExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int int1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int int1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Integer int1 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int int2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int int2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Integer int2 = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTSubstrExp(t,int1,int2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("substrExp",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // equalExp ::= EQUAL LPAREN tlExp COMMA tlExp RPAREN 
            {
              ASTEqualExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTExp e1 = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp e2 = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTEqualExp(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("equalExp",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // eqvExp ::= EQV LPAREN tlExp COMMA tlExp RPAREN 
            {
              ASTEqvExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTExp e1 = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp e2 = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTEqvExp(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("eqvExp",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listExp ::= LBRACKET expList RBRACKET 
            {
              ASTListExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<ASTExp> e = (ArrayList<ASTExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTListExp(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("listExp",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listExp ::= LIST LPAREN expList RPAREN 
            {
              ASTListExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<ASTExp> e = (ArrayList<ASTExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTListExp(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("listExp",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cdrExp ::= CDR tlExp 
            {
              ASTCdrExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTCdrExp(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cdrExp",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // carExp ::= CAR tlExp 
            {
              ASTCarExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTCarExp(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("carExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // pairExp ::= PAIR LPAREN tlExp COMMA tlExp RPAREN 
            {
              ASTPairExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTExp e1 = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp e2 = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTPairExp(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairExp",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tlExp ::= funCall 
            {
              ASTExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLFunCall s = (SMPLFunCall)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tlExp ::= STRING 
            {
              ASTExp RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = str; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tlExp ::= orStmt 
            {
              ASTExp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTLogBinaryExp<AIRExp> o = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = o; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tlExp ::= substrExp 
            {
              ASTExp RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTSubstrExp sub = (ASTSubstrExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = sub; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tlExp ::= equalExp 
            {
              ASTExp RESULT =null;
		int equalleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int equalright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTEqualExp equal = (ASTEqualExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = equal; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tlExp ::= eqvExp 
            {
              ASTExp RESULT =null;
		int eqvleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eqvright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTEqvExp eqv = (ASTEqvExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = eqv; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tlExp ::= listExp 
            {
              ASTExp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTListExp list = (ASTListExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RSULT = list; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tlExp ::= cdrExp 
            {
              ASTExp RESULT =null;
		int cdrleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cdrright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTCdrExp cdr = (ASTCdrExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = cdr; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tlExp ::= carExp 
            {
              ASTExp RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTCarExp car = (ASTCarExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = car; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tlExp ::= pairExp 
            {
              ASTExp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTPairExp p = (ASTPairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // printStatement ::= PRINTLN tlExp SEMI 
            {
              SMPLPrintStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLPrintStmt("\n", e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("printStatement",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // printStatement ::= PRINT tlExp SEMI 
            {
              SMPLPrintStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLPrintStmt("", e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("printStatement",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // assignment ::= VAR ASSIGN tlExp SEMI 
            {
              SMPLAssignment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp c = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = new ExpAssign(v, c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= funDef 
            {
              SMPLStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLFunDef f = (SMPLFunDef)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= printStatement 
            {
              SMPLStatement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLPrintStmt p = (SMPLPrintStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= assignment 
            {
              SMPLStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLAssignment a = (SMPLAssignment)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= empty 
            {
              SMPLSequence RESULT =null;
		 RESULT = new SMPLSequence(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              SMPLSequence RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLSequence seq = (SMPLSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLStatement s = (SMPLStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				seq.addStatement(s);
		    	RESULT = seq; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmtList 
            {
              SMPLProgram RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLSequence seq = (SMPLSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new SMPLProgram(seq);
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLProgram start_val = (SMPLProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

