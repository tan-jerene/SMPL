
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 28 08:25:02 PST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 28 08:25:02 PST 2015
  */
public class SMPLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\010\006\000\002\010\010\000\002\006\006\000\002\050" +
    "\005\000\002\051\005\000\002\051\003\000\002\015\004" +
    "\000\002\005\005\000\002\011\005\000\002\012\004\000" +
    "\002\012\004\000\002\007\005\000\002\042\007\000\002" +
    "\042\011\000\002\042\005\000\002\020\005\000\002\021" +
    "\004\000\002\021\003\000\002\033\010\000\002\043\006" +
    "\000\002\044\007\000\002\013\005\000\002\013\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\045" +
    "\006\000\002\045\005\000\002\045\003\000\002\036\005" +
    "\000\002\014\005\000\002\055\007\000\002\055\005\000" +
    "\002\055\003\000\002\053\006\000\002\054\006\000\002" +
    "\040\010\000\002\037\010\000\002\052\012\000\002\046" +
    "\010\000\002\047\007\000\002\023\005\000\002\023\003" +
    "\000\002\024\005\000\002\024\003\000\002\025\004\000" +
    "\002\025\003\000\002\022\005\000\002\022\003\000\002" +
    "\017\005\000\002\017\005\000\002\017\004\000\002\017" +
    "\004\000\002\017\003\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\003\000\002\027\005\000" +
    "\002\027\003\000\002\030\003\000\002\030\006\000\002" +
    "\030\003\000\002\030\003\000\002\041\006\000\002\032" +
    "\003\000\002\032\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\005\000\002\062\003\000\002" +
    "\062\003\000\002\061\005\000\002\061\003\000\002\057" +
    "\005\000\002\057\003\000\002\060\003\000\002\060\003" +
    "\000\002\063\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\050\002\uffa0\007\uffa0\010\uffa0\022\uffa0\026" +
    "\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0\045\uffa0\046\uffa0" +
    "\060\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101" +
    "\uffa0\102\uffa0\001\002\000\004\002\231\001\002\000\070" +
    "\002\ufffe\007\ufffe\010\ufffe\022\ufffe\023\ufffe\024\ufffe\026" +
    "\ufffe\031\ufffe\033\ufffe\034\ufffe\035\ufffe\045\ufffe\046\ufffe" +
    "\060\ufffe\061\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\073" +
    "\ufffe\074\ufffe\075\ufffe\076\ufffe\077\ufffe\100\ufffe\101\ufffe" +
    "\102\ufffe\001\002\000\050\002\000\007\024\010\015\022" +
    "\023\026\017\031\012\033\045\034\041\035\053\045\027" +
    "\046\047\060\014\074\013\075\032\076\016\077\020\100" +
    "\034\101\051\102\043\001\002\000\014\004\uffa3\030\066" +
    "\061\uffa3\063\uffa3\067\uffa3\001\002\000\004\066\230\001" +
    "\002\000\004\066\227\001\002\000\004\064\216\001\002" +
    "\000\050\004\uffaf\023\uffaf\025\uffaf\027\uffaf\030\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\061\uffaf\063\uffaf\066\uffaf\067\uffaf\070\uffaf\073" +
    "\uffaf\001\002\000\050\017\076\026\017\034\041\036\072" +
    "\037\106\044\103\045\027\046\047\051\210\060\014\062" +
    "\101\072\075\074\013\075\032\076\016\077\020\100\034" +
    "\101\057\102\043\001\002\000\046\017\076\026\017\034" +
    "\041\036\072\037\106\044\103\045\027\046\047\060\014" +
    "\062\101\072\075\074\013\075\032\076\016\077\020\100" +
    "\034\101\057\102\043\001\002\000\050\004\uffab\023\uffab" +
    "\025\uffab\027\uffab\030\uffab\047\uffab\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\056\uffab\061\uffab\063\uffab" +
    "\066\uffab\067\uffab\070\uffab\073\uffab\001\002\000\026\045" +
    "\027\046\047\060\014\074\013\075\032\076\016\077\020" +
    "\100\034\101\057\102\043\001\002\000\050\004\uffae\023" +
    "\uffae\025\uffae\027\uffae\030\uffae\047\uffae\050\uffae\051\uffae" +
    "\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\061\uffae\063" +
    "\uffae\066\uffae\067\uffae\070\uffae\073\uffae\001\002\000\004" +
    "\066\205\001\002\000\050\004\uffb4\023\uffb4\025\uffb4\027" +
    "\uffb4\030\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\061\uffb4\063\uffb4\066\uffb4\067" +
    "\uffb4\070\uffb4\073\uffb4\001\002\000\046\017\076\026\017" +
    "\034\041\036\072\037\106\044\103\045\027\046\047\060" +
    "\014\062\101\072\075\074\013\075\032\076\016\077\020" +
    "\100\034\101\057\102\043\001\002\000\046\017\076\026" +
    "\017\034\041\036\072\037\106\044\103\045\027\046\047" +
    "\060\014\062\101\072\075\074\013\075\032\076\016\077" +
    "\020\100\034\101\057\102\043\001\002\000\040\004\uffc2" +
    "\023\uffc2\025\uffc2\027\uffc2\030\uffc2\047\135\050\136\051" +
    "\137\052\140\061\uffc2\063\uffc2\066\uffc2\067\uffc2\070\uffc2" +
    "\073\uffc2\001\002\000\004\066\176\001\002\000\050\004" +
    "\uffb1\023\uffb1\025\uffb1\027\uffb1\030\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\061" +
    "\uffb1\063\uffb1\066\uffb1\067\uffb1\070\uffb1\073\uffb1\001\002" +
    "\000\004\066\175\001\002\000\046\004\uffbd\023\uffbd\025" +
    "\uffbd\027\uffbd\030\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\053\144\054\143\055\142\061\uffbd\063\uffbd\066\uffbd\067" +
    "\uffbd\070\uffbd\073\uffbd\001\002\000\050\004\uffac\023\uffac" +
    "\025\uffac\027\uffac\030\uffac\047\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\054\uffac\055\uffac\056\uffac\061\uffac\063\uffac" +
    "\066\uffac\067\uffac\070\uffac\073\uffac\001\002\000\050\004" +
    "\uffb6\023\uffb6\025\uffb6\027\uffb6\030\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\061" +
    "\uffb6\063\uffb6\066\uffb6\067\uffb6\070\uffb6\073\uffb6\001\002" +
    "\000\050\004\uffad\023\uffad\025\uffad\027\uffad\030\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\056\uffad\061\uffad\063\uffad\066\uffad\067\uffad\070\uffad\073" +
    "\uffad\001\002\000\026\004\uffc6\023\uffc6\027\uffc6\030\uffc6" +
    "\061\uffc6\063\uffc6\066\uffc6\067\uffc6\070\uffc6\073\uffc6\001" +
    "\002\000\026\004\uffc8\023\uffc8\027\070\030\uffc8\061\uffc8" +
    "\063\uffc8\066\uffc8\067\uffc8\070\uffc8\073\uffc8\001\002\000" +
    "\004\066\174\001\002\000\006\004\172\067\063\001\002" +
    "\000\006\060\156\101\155\001\002\000\004\066\154\001" +
    "\002\000\050\004\uffaa\023\uffaa\025\uffaa\027\uffaa\030\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\061\uffaa\063\uffaa\066\uffaa\067\uffaa\070\uffaa" +
    "\073\uffaa\001\002\000\004\066\153\001\002\000\004\101" +
    "\151\001\002\000\050\004\uffb7\023\uffb7\025\uffb7\027\uffb7" +
    "\030\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\056\uffb7\061\uffb7\063\uffb7\066\uffb7\067\uffb7" +
    "\070\uffb7\073\uffb7\001\002\000\050\004\uffb0\023\uffb0\025" +
    "\uffb0\027\uffb0\030\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\061\uffb0\063\uffb0\066" +
    "\uffb0\067\uffb0\070\uffb0\073\uffb0\001\002\000\030\004\uffc4" +
    "\023\uffc4\025\133\027\uffc4\030\uffc4\061\uffc4\063\uffc4\066" +
    "\uffc4\067\uffc4\070\uffc4\073\uffc4\001\002\000\006\004\131" +
    "\060\061\001\002\000\050\004\uffb3\023\uffb3\025\uffb3\027" +
    "\uffb3\030\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3" +
    "\054\uffb3\055\uffb3\056\uffb3\061\uffb3\063\uffb3\066\uffb3\067" +
    "\uffb3\070\uffb3\073\uffb3\001\002\000\046\017\076\026\017" +
    "\034\041\036\072\037\106\044\103\045\027\046\047\060" +
    "\014\062\101\072\075\074\013\075\032\076\016\077\020" +
    "\100\034\101\057\102\043\001\002\000\050\004\uffb9\023" +
    "\uffb9\025\uffb9\027\uffb9\030\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\056\061\uffb9\063" +
    "\uffb9\066\uffb9\067\uffb9\070\uffb9\073\uffb9\001\002\000\070" +
    "\002\uffff\007\uffff\010\uffff\022\uffff\023\uffff\024\uffff\026" +
    "\uffff\031\uffff\033\uffff\034\uffff\035\uffff\045\uffff\046\uffff" +
    "\060\uffff\061\uffff\065\uffff\066\uffff\067\uffff\070\uffff\073" +
    "\uffff\074\uffff\075\uffff\076\uffff\077\uffff\100\uffff\101\uffff" +
    "\102\uffff\001\002\000\026\045\027\046\047\060\014\074" +
    "\013\075\032\076\016\077\020\100\034\101\057\102\043" +
    "\001\002\000\004\060\061\001\002\000\050\004\uffb8\023" +
    "\uffb8\025\uffb8\027\uffb8\030\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\061\uffb8\063" +
    "\uffb8\066\uffb8\067\uffb8\070\uffb8\073\uffb8\001\002\000\030" +
    "\026\017\045\027\046\047\060\014\074\013\075\032\076" +
    "\016\077\020\100\034\101\057\102\043\001\002\000\006" +
    "\061\064\067\063\001\002\000\030\026\017\045\027\046" +
    "\047\060\014\074\013\075\032\076\016\077\020\100\034" +
    "\101\057\102\043\001\002\000\050\004\uffb2\023\uffb2\025" +
    "\uffb2\027\uffb2\030\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\056\uffb2\061\uffb2\063\uffb2\066" +
    "\uffb2\067\uffb2\070\uffb2\073\uffb2\001\002\000\014\004\uffa4" +
    "\030\066\061\uffa4\063\uffa4\067\uffa4\001\002\000\030\026" +
    "\017\045\027\046\047\060\014\074\013\075\032\076\016" +
    "\077\020\100\034\101\057\102\043\001\002\000\026\004" +
    "\uffc9\023\uffc9\027\070\030\uffc9\061\uffc9\063\uffc9\066\uffc9" +
    "\067\uffc9\070\uffc9\073\uffc9\001\002\000\030\026\017\045" +
    "\027\046\047\060\014\074\013\075\032\076\016\077\020" +
    "\100\034\101\057\102\043\001\002\000\026\004\uffc7\023" +
    "\uffc7\027\uffc7\030\uffc7\061\uffc7\063\uffc7\066\uffc7\067\uffc7" +
    "\070\uffc7\073\uffc7\001\002\000\004\060\127\001\002\000" +
    "\020\023\uffde\030\066\061\uffde\066\uffde\067\uffde\070\uffde" +
    "\073\uffde\001\002\000\016\023\uffda\061\uffda\066\uffda\067" +
    "\uffda\070\uffda\073\uffda\001\002\000\006\067\uffa0\073\uffa0" +
    "\001\002\000\004\060\115\001\002\000\020\023\uffd9\043" +
    "\113\061\uffd9\066\uffd9\067\uffd9\070\uffd9\073\uffd9\001\002" +
    "\000\004\066\uffec\001\002\000\030\026\017\045\027\046" +
    "\047\060\014\074\013\075\032\076\016\077\020\100\034" +
    "\101\057\102\043\001\002\000\016\023\uffdc\061\uffdc\066" +
    "\uffdc\067\uffdc\070\uffdc\073\uffdc\001\002\000\020\023\uffd6" +
    "\043\uffd6\061\uffd6\066\uffd6\067\uffd6\070\uffd6\073\uffd6\001" +
    "\002\000\016\023\uffdb\061\uffdb\066\uffdb\067\uffdb\070\uffdb" +
    "\073\uffdb\001\002\000\016\023\uffdd\061\uffdd\066\uffdd\067" +
    "\uffdd\070\uffdd\073\uffdd\001\002\000\004\060\107\001\002" +
    "\000\004\061\110\001\002\000\016\023\uffdf\061\uffdf\066" +
    "\uffdf\067\uffdf\070\uffdf\073\uffdf\001\002\000\006\063\112" +
    "\067\063\001\002\000\020\023\uffd7\043\uffd7\061\uffd7\066" +
    "\uffd7\067\uffd7\070\uffd7\073\uffd7\001\002\000\010\017\076" +
    "\044\103\062\101\001\002\000\016\023\uffd5\061\uffd5\066" +
    "\uffd5\067\uffd5\070\uffd5\073\uffd5\001\002\000\030\026\017" +
    "\045\027\046\047\060\014\074\013\075\032\076\016\077" +
    "\020\100\034\101\057\102\043\001\002\000\006\061\117" +
    "\067\063\001\002\000\020\023\uffd8\043\uffd8\061\uffd8\066" +
    "\uffd8\067\uffd8\070\uffd8\073\uffd8\001\002\000\006\067\uffd1" +
    "\073\uffd1\001\002\000\006\067\122\073\123\001\002\000" +
    "\046\017\076\026\017\034\041\036\072\037\106\044\103" +
    "\045\027\046\047\060\014\062\101\072\075\074\013\075" +
    "\032\076\016\077\020\100\034\101\057\102\043\001\002" +
    "\000\016\023\uffd4\061\uffd4\066\uffd4\067\uffd4\070\uffd4\073" +
    "\uffd4\001\002\000\010\067\uffd2\070\125\073\uffd2\001\002" +
    "\000\046\017\076\026\017\034\041\036\072\037\106\044" +
    "\103\045\027\046\047\060\014\062\101\072\075\074\013" +
    "\075\032\076\016\077\020\100\034\101\057\102\043\001" +
    "\002\000\006\067\uffd3\073\uffd3\001\002\000\004\061\130" +
    "\001\002\000\016\023\uffe0\061\uffe0\066\uffe0\067\uffe0\070" +
    "\uffe0\073\uffe0\001\002\000\046\017\076\026\017\034\041" +
    "\036\072\037\106\044\103\045\027\046\047\060\014\062" +
    "\101\072\075\074\013\075\032\076\016\077\020\100\034" +
    "\101\057\102\043\001\002\000\004\066\uffee\001\002\000" +
    "\026\045\027\046\047\060\014\074\013\075\032\076\016" +
    "\077\020\100\034\101\057\102\043\001\002\000\040\004" +
    "\uffc3\023\uffc3\025\uffc3\027\uffc3\030\uffc3\047\135\050\136" +
    "\051\137\052\140\061\uffc3\063\uffc3\066\uffc3\067\uffc3\070" +
    "\uffc3\073\uffc3\001\002\000\026\045\027\046\047\060\014" +
    "\074\013\075\032\076\016\077\020\100\034\101\057\102" +
    "\043\001\002\000\040\004\uffbf\023\uffbf\025\uffbf\027\uffbf" +
    "\030\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\061\uffbf\063" +
    "\uffbf\066\uffbf\067\uffbf\070\uffbf\073\uffbf\001\002\000\026" +
    "\045\027\046\047\060\014\074\013\075\032\076\016\077" +
    "\020\100\034\101\057\102\043\001\002\000\040\004\uffbe" +
    "\023\uffbe\025\uffbe\027\uffbe\030\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\061\uffbe\063\uffbe\066\uffbe\067\uffbe\070\uffbe" +
    "\073\uffbe\001\002\000\046\004\uffc0\023\uffc0\025\uffc0\027" +
    "\uffc0\030\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\144" +
    "\054\143\055\142\061\uffc0\063\uffc0\066\uffc0\067\uffc0\070" +
    "\uffc0\073\uffc0\001\002\000\026\045\027\046\047\060\014" +
    "\074\013\075\032\076\016\077\020\100\034\101\057\102" +
    "\043\001\002\000\026\045\027\046\047\060\014\074\013" +
    "\075\032\076\016\077\020\100\034\101\057\102\043\001" +
    "\002\000\026\045\027\046\047\060\014\074\013\075\032" +
    "\076\016\077\020\100\034\101\057\102\043\001\002\000" +
    "\050\004\uffbc\023\uffbc\025\uffbc\027\uffbc\030\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056" +
    "\056\061\uffbc\063\uffbc\066\uffbc\067\uffbc\070\uffbc\073\uffbc" +
    "\001\002\000\050\004\uffbb\023\uffbb\025\uffbb\027\uffbb\030" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\056\056\061\uffbb\063\uffbb\066\uffbb\067\uffbb\070" +
    "\uffbb\073\uffbb\001\002\000\050\004\uffba\023\uffba\025\uffba" +
    "\027\uffba\030\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053" +
    "\uffba\054\uffba\055\uffba\056\056\061\uffba\063\uffba\066\uffba" +
    "\067\uffba\070\uffba\073\uffba\001\002\000\046\004\uffc1\023" +
    "\uffc1\025\uffc1\027\uffc1\030\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\144\054\143\055\142\061\uffc1\063\uffc1\066" +
    "\uffc1\067\uffc1\070\uffc1\073\uffc1\001\002\000\046\017\076" +
    "\026\017\034\041\036\072\037\106\044\103\045\027\046" +
    "\047\060\014\062\101\072\075\074\013\075\032\076\016" +
    "\077\020\100\034\101\057\102\043\001\002\000\004\066" +
    "\uffea\001\002\000\070\002\ufff6\007\ufff6\010\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\026\ufff6\031\ufff6\033\ufff6\034\ufff6\035" +
    "\ufff6\045\ufff6\046\ufff6\060\ufff6\061\ufff6\065\ufff6\066\ufff6" +
    "\067\ufff6\070\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077" +
    "\ufff6\100\ufff6\101\ufff6\102\ufff6\001\002\000\070\002\ufffa" +
    "\007\ufffa\010\ufffa\022\ufffa\023\ufffa\024\ufffa\026\ufffa\031" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\045\ufffa\046\ufffa\060\ufffa" +
    "\061\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\073\ufffa\074" +
    "\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa" +
    "\001\002\000\062\007\uffa0\010\uffa0\022\uffa0\023\uffa0\026" +
    "\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0\045\uffa0\046\uffa0" +
    "\060\uffa0\061\uffa0\066\uffa0\067\uffa0\070\uffa0\073\uffa0\074" +
    "\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0" +
    "\001\002\000\004\101\157\001\002\000\010\061\uffa5\067" +
    "\uffa5\071\uffa5\001\002\000\010\061\162\067\161\071\163" +
    "\001\002\000\004\101\170\001\002\000\062\007\uffa0\010" +
    "\uffa0\022\uffa0\023\uffa0\026\uffa0\031\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\045\uffa0\046\uffa0\060\uffa0\061\uffa0\066\uffa0\067" +
    "\uffa0\070\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0" +
    "\100\uffa0\101\uffa0\102\uffa0\001\002\000\004\101\157\001" +
    "\002\000\006\061\165\067\161\001\002\000\062\007\uffa0" +
    "\010\uffa0\022\uffa0\023\uffa0\026\uffa0\031\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\045\uffa0\046\uffa0\060\uffa0\061\uffa0\066\uffa0" +
    "\067\uffa0\070\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077" +
    "\uffa0\100\uffa0\101\uffa0\102\uffa0\001\002\000\062\007\024" +
    "\010\015\022\023\023\uffe8\026\017\031\012\033\045\034" +
    "\041\035\053\045\027\046\047\060\014\061\uffe8\066\uffe8" +
    "\067\uffe8\070\uffe8\073\uffe8\074\013\075\032\076\016\077" +
    "\020\100\034\101\051\102\043\001\002\000\062\007\024" +
    "\010\015\022\023\023\uffe9\026\017\031\012\033\045\034" +
    "\041\035\053\045\027\046\047\060\014\061\uffe9\066\uffe9" +
    "\067\uffe9\070\uffe9\073\uffe9\074\013\075\032\076\016\077" +
    "\020\100\034\101\051\102\043\001\002\000\010\061\uffa6" +
    "\067\uffa6\071\uffa6\001\002\000\062\007\024\010\015\022" +
    "\023\023\uffe7\026\017\031\012\033\045\034\041\035\053" +
    "\045\027\046\047\060\014\061\uffe7\066\uffe7\067\uffe7\070" +
    "\uffe7\073\uffe7\074\013\075\032\076\016\077\020\100\034" +
    "\101\051\102\043\001\002\000\046\017\076\026\017\034" +
    "\041\036\072\037\106\044\103\045\027\046\047\060\014" +
    "\062\101\072\075\074\013\075\032\076\016\077\020\100" +
    "\034\101\057\102\043\001\002\000\004\066\uffed\001\002" +
    "\000\070\002\ufff7\007\ufff7\010\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\026\ufff7\031\ufff7\033\ufff7\034\ufff7\035\ufff7\045\ufff7" +
    "\046\ufff7\060\ufff7\061\ufff7\065\ufff7\066\ufff7\067\ufff7\070" +
    "\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7" +
    "\101\ufff7\102\ufff7\001\002\000\070\002\ufff8\007\ufff8\010" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\026\ufff8\031\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\045\ufff8\046\ufff8\060\ufff8\061\ufff8\065" +
    "\ufff8\066\ufff8\067\ufff8\070\ufff8\073\ufff8\074\ufff8\075\ufff8" +
    "\076\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8\001\002\000" +
    "\070\002\ufff9\007\ufff9\010\ufff9\022\ufff9\023\ufff9\024\ufff9" +
    "\026\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9\045\ufff9\046" +
    "\ufff9\060\ufff9\061\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9" +
    "\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\100\ufff9\101" +
    "\ufff9\102\ufff9\001\002\000\004\066\uffef\001\002\000\004" +
    "\023\201\001\002\000\052\007\uffa0\010\uffa0\022\uffa0\024" +
    "\uffa0\026\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0\045\uffa0" +
    "\046\uffa0\060\uffa0\066\uffa0\074\uffa0\075\uffa0\076\uffa0\077" +
    "\uffa0\100\uffa0\101\uffa0\102\uffa0\001\002\000\052\007\024" +
    "\010\015\022\023\024\203\026\017\031\012\033\045\034" +
    "\041\035\053\045\027\046\047\060\014\066\ufff5\074\013" +
    "\075\032\076\016\077\020\100\034\101\051\102\043\001" +
    "\002\000\050\007\uffa0\010\uffa0\022\uffa0\026\uffa0\031\uffa0" +
    "\033\uffa0\034\uffa0\035\uffa0\045\uffa0\046\uffa0\060\uffa0\066" +
    "\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0" +
    "\102\uffa0\001\002\000\050\007\024\010\015\022\023\026" +
    "\017\031\012\033\045\034\041\035\053\045\027\046\047" +
    "\060\014\066\ufff4\074\013\075\032\076\016\077\020\100" +
    "\034\101\051\102\043\001\002\000\070\002\ufffd\007\ufffd" +
    "\010\ufffd\022\ufffd\023\ufffd\024\ufffd\026\ufffd\031\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\045\ufffd\046\ufffd\060\ufffd\061\ufffd" +
    "\065\ufffd\066\ufffd\067\ufffd\070\ufffd\073\ufffd\074\ufffd\075" +
    "\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd\102\ufffd\001\002" +
    "\000\030\004\uffc5\023\uffc5\025\133\027\uffc5\030\uffc5\061" +
    "\uffc5\063\uffc5\066\uffc5\067\uffc5\070\uffc5\073\uffc5\001\002" +
    "\000\004\066\uffeb\001\002\000\020\060\214\074\013\075" +
    "\032\076\016\077\020\100\034\102\043\001\002\000\004" +
    "\061\212\001\002\000\050\004\uffa9\023\uffa9\025\uffa9\027" +
    "\uffa9\030\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\061\uffa9\063\uffa9\066\uffa9\067" +
    "\uffa9\070\uffa9\073\uffa9\001\002\000\004\061\215\001\002" +
    "\000\046\017\076\026\017\034\041\036\072\037\106\044" +
    "\103\045\027\046\047\060\014\062\101\072\075\074\013" +
    "\075\032\076\016\077\020\100\034\101\057\102\043\001" +
    "\002\000\050\004\uffb5\023\uffb5\025\uffb5\027\uffb5\030\uffb5" +
    "\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\061\uffb5\063\uffb5\066\uffb5\067\uffb5\070\uffb5" +
    "\073\uffb5\001\002\000\006\065\uffa0\067\uffa0\001\002\000" +
    "\006\065\222\067\221\001\002\000\006\065\ufff0\067\ufff0" +
    "\001\002\000\030\026\017\045\027\046\047\060\014\074" +
    "\013\075\032\076\016\077\020\100\034\101\057\102\043" +
    "\001\002\000\004\066\ufff3\001\002\000\006\030\066\070" +
    "\225\001\002\000\006\065\ufff1\067\ufff1\001\002\000\052" +
    "\007\uffa0\010\uffa0\022\uffa0\026\uffa0\031\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\045\uffa0\046\uffa0\060\uffa0\065\uffa0\067\uffa0" +
    "\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\102" +
    "\uffa0\001\002\000\052\007\024\010\015\022\023\026\017" +
    "\031\012\033\045\034\041\035\053\045\027\046\047\060" +
    "\014\065\ufff2\067\ufff2\074\013\075\032\076\016\077\020" +
    "\100\034\101\051\102\043\001\002\000\070\002\ufffb\007" +
    "\ufffb\010\ufffb\022\ufffb\023\ufffb\024\ufffb\026\ufffb\031\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\045\ufffb\046\ufffb\060\ufffb\061" +
    "\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\073\ufffb\074\ufffb" +
    "\075\ufffb\076\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\001" +
    "\002\000\070\002\ufffc\007\ufffc\010\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\026\ufffc\031\ufffc\033\ufffc\034\ufffc\035\ufffc\045" +
    "\ufffc\046\ufffc\060\ufffc\061\ufffc\065\ufffc\066\ufffc\067\ufffc" +
    "\070\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\100" +
    "\ufffc\101\ufffc\102\ufffc\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\010\002\003\003\005\063\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\004\054\005\020" +
    "\006\027\007\036\010\025\011\007\012\010\015\041\017" +
    "\024\022\047\023\006\024\035\025\034\026\030\027\053" +
    "\030\045\031\032\032\051\041\021\042\043\057\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\013\073\014" +
    "\101\016\210\017\024\022\047\023\072\024\035\025\034" +
    "\026\030\027\053\030\045\031\032\032\051\036\103\041" +
    "\021\042\104\045\076\001\001\000\044\013\073\014\101" +
    "\016\206\017\024\022\047\023\072\024\035\025\034\026" +
    "\030\027\053\030\045\031\032\032\051\036\103\041\021" +
    "\042\104\045\076\001\001\000\002\001\001\000\022\017" +
    "\024\022\205\026\030\027\053\030\045\031\032\032\051" +
    "\041\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\013\073\014\101\016\177\017\024" +
    "\022\047\023\072\024\035\025\034\026\030\027\053\030" +
    "\045\031\032\032\051\036\103\041\021\042\104\045\076" +
    "\001\001\000\044\013\073\014\101\016\176\017\024\022" +
    "\047\023\072\024\035\025\034\026\030\027\053\030\045" +
    "\031\032\032\051\036\103\041\021\042\104\045\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\013\073\014\101\016\077\017\024\022\047\023\072\024" +
    "\035\025\034\026\030\027\053\030\045\031\032\032\051" +
    "\036\103\041\021\042\104\045\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\030\057\031\032\032\051" +
    "\041\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\017\024\022\047\023\006\024\035\025\034\026\030" +
    "\027\053\030\045\031\032\032\051\041\021\057\061\001" +
    "\001\000\002\001\001\000\030\017\024\022\047\023\064" +
    "\024\035\025\034\026\030\027\053\030\045\031\032\032" +
    "\051\041\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\017\024\022\047\024\066\025\034\026\030\027" +
    "\053\030\045\031\032\032\051\041\021\001\001\000\002" +
    "\001\001\000\024\017\024\022\047\025\070\026\030\027" +
    "\053\030\045\031\032\032\051\041\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\055\120\063\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\017\024\022" +
    "\047\023\006\024\035\025\034\026\030\027\053\030\045" +
    "\031\032\032\051\041\021\057\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\113\001\001" +
    "\000\002\001\001\000\032\017\024\022\047\023\006\024" +
    "\035\025\034\026\030\027\053\030\045\031\032\032\051" +
    "\041\021\057\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\013\073" +
    "\014\101\016\123\017\024\022\047\023\072\024\035\025" +
    "\034\026\030\027\053\030\045\031\032\032\051\036\103" +
    "\041\021\042\104\045\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\013\073\014\101\016\125\017\024" +
    "\022\047\023\072\024\035\025\034\026\030\027\053\030" +
    "\045\031\032\032\051\036\103\041\021\042\104\045\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\013\073\014\101\016\131\017\024\022\047" +
    "\023\072\024\035\025\034\026\030\027\053\030\045\031" +
    "\032\032\051\036\103\041\021\042\104\045\076\001\001" +
    "\000\002\001\001\000\020\017\133\026\030\027\053\030" +
    "\045\031\032\032\051\041\021\001\001\000\002\001\001" +
    "\000\016\026\147\027\053\030\045\031\032\032\051\041" +
    "\021\001\001\000\002\001\001\000\016\026\140\027\053" +
    "\030\045\031\032\032\051\041\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\027\146\030\045\031\032" +
    "\032\051\041\021\001\001\000\014\027\145\030\045\031" +
    "\032\032\051\041\021\001\001\000\014\027\144\030\045" +
    "\031\032\032\051\041\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\013\073\014\101\016\151\017\024\022\047\023\072\024" +
    "\035\025\034\026\030\027\053\030\045\031\032\032\051" +
    "\036\103\041\021\042\104\045\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\170" +
    "\063\004\001\001\000\004\061\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\166" +
    "\063\004\001\001\000\004\061\163\001\001\000\002\001" +
    "\001\000\006\003\165\063\004\001\001\000\054\004\054" +
    "\005\020\006\027\007\036\010\025\011\007\012\010\015" +
    "\041\017\024\022\047\023\006\024\035\025\034\026\030" +
    "\027\053\030\045\031\032\032\051\041\021\042\043\057" +
    "\037\001\001\000\054\004\054\005\020\006\027\007\036" +
    "\010\025\011\007\012\010\015\041\017\024\022\047\023" +
    "\006\024\035\025\034\026\030\027\053\030\045\031\032" +
    "\032\051\041\021\042\043\057\037\001\001\000\002\001" +
    "\001\000\054\004\054\005\020\006\027\007\036\010\025" +
    "\011\007\012\010\015\041\017\024\022\047\023\006\024" +
    "\035\025\034\026\030\027\053\030\045\031\032\032\051" +
    "\041\021\042\043\057\037\001\001\000\044\013\073\014" +
    "\101\016\172\017\024\022\047\023\072\024\035\025\034" +
    "\026\030\027\053\030\045\031\032\032\051\036\103\041" +
    "\021\042\104\045\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\201\063\004\001\001" +
    "\000\054\004\054\005\020\006\027\007\036\010\025\011" +
    "\007\012\010\015\041\017\024\022\047\023\006\024\035" +
    "\025\034\026\030\027\053\030\045\031\032\032\051\041" +
    "\021\042\043\057\037\001\001\000\006\003\203\063\004" +
    "\001\001\000\054\004\054\005\020\006\027\007\036\010" +
    "\025\011\007\012\010\015\041\017\024\022\047\023\006" +
    "\024\035\025\034\026\030\027\053\030\045\031\032\032" +
    "\051\041\021\042\043\057\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\013\073\014\101\016\210\017\024\022\047\023" +
    "\072\024\035\025\034\026\030\027\053\030\045\031\032" +
    "\032\051\036\103\041\021\042\104\045\076\001\001\000" +
    "\002\001\001\000\006\051\216\063\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\017\024\022\047\023" +
    "\222\024\035\025\034\026\030\027\053\030\045\031\032" +
    "\032\051\041\021\050\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\225\063\004" +
    "\001\001\000\054\004\054\005\020\006\027\007\036\010" +
    "\025\011\007\012\010\015\041\017\024\022\047\023\006" +
    "\024\035\025\034\026\030\027\053\030\045\031\032\032" +
    "\051\041\021\042\043\057\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

		// No longer necessary		
	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token at line: " + 
                                lexer.getLine() + ", char: " + lexer.getChar());
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
                    super(l);
                    lexer = l;
                }

		public SMPLParser(String file) throws FileNotFoundException {
	            this(new SMPLLexer(new FileReader(file)));
		}

                public SMPLParser(InputStream is) {
                    this(new SMPLLexer(is));
                }

		public void report_error(String message, Object info) {
		    System.err.println(message + info);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error while reading: ", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SMPLParser$actions {

          
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",49, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expListE ::= empty 
            {
              ArrayList<ASTExp> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListE",46, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expListE ::= expList 
            {
              ArrayList<ASTExp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<ASTExp> lst = (ArrayList<ASTExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListE",46, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expList ::= orExp 
            {
              ArrayList<ASTExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTLogBinaryExp<AIRExp> e = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		  RESULT = new ArrayList<>();
		  RESULT.add(e);
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",45, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expList ::= expList COMMA orExp 
            {
              ArrayList<ASTExp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<ASTExp> lst = (ArrayList<ASTExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTLogBinaryExp<AIRExp> e = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
	          lst.add(e);
		  RESULT = lst;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",45, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ArrayList<>();
		RESULT.add(id);
	      
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",47, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		lst.add(id);
		RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",47, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",48, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",48, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cFactor ::= LPAREN tlExp RPAREN 
            {
              ASTExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cFactor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cFactor ::= STRING 
            {
              ASTExp<AIRExp> RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = str; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cFactor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cFactor ::= BININT 
            {
              ASTExp<AIRExp> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRExpInt(b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cFactor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cFactor ::= HEXINT 
            {
              ASTExp<AIRExp> RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRExpInt(h); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cFactor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cFactor ::= REAL 
            {
              ASTExp<AIRExp> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		RESULT = new AIRExpFrac(r); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cFactor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cFactor ::= FRACTION 
            {
              ASTExp<AIRExp> RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double fr = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRExpFrac(fr); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cFactor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cFactor ::= INTEGER 
            {
              ASTExp<AIRExp> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRExpInt(i); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cFactor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // boolFactor ::= FALSE 
            {
              ASTExp<AIRExp> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBoolExp("false"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // boolFactor ::= TRUE 
            {
              ASTExp<AIRExp> RESULT =null;
		 RESULT = new ASTBoolExp("true"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // funCall ::= VAR LPAREN expList RPAREN 
            {
              SMPLFunCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<ASTExp> e = (ArrayList<ASTExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLFunCall(v, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funCall",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= boolFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> b = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= funCall 
            {
              ASTExp<AIRExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLFunCall f = (SMPLFunCall)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = fc; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= LPAREN MINUS cFactor RPAREN 
            {
              ASTExp<AIRExp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp<AIRExp> c = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTBinaryExp<AIRExp>("-", new AIRExpInt(0), c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= cFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> c = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // power ::= factor 
            {
              ASTExp<AIRExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("power",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // power ::= power POW factor 
            {
              ASTExp<AIRExp> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<AIRExp> p = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("^", p, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("power",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // term ::= power 
            {
              ASTExp<AIRExp> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> p = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // term ::= term MOD power 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("%", t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term ::= term DIV power 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("/", t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= term TIMES power 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("*", t, f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= term 
            {
              ASTBinaryExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression DEC 
            {
              ASTBinaryExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTBinaryExp<AIRExp> e = (ASTBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTBinaryExp<AIRExp>("-", e, new AIRExpInt(1)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression INC 
            {
              ASTBinaryExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTBinaryExp<AIRExp> e = (ASTBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTBinaryExp<AIRExp>("+", e, new AIRExpInt(1)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression MINUS term 
            {
              ASTBinaryExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTBinaryExp<AIRExp> e = (ASTBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("-", e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= expression PLUS term 
            {
              ASTBinaryExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTBinaryExp<AIRExp> e = (ASTBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("+", e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cmpExp ::= expression 
            {
              ASTCmpBinaryExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTBinaryExp<AIRExp> e = (ASTBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cmpExp",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cmpExp ::= cmpExp CMP expression 
            {
              ASTCmpBinaryExp<AIRExp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTCmpBinaryExp<AIRExp> c = (ASTCmpBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTBinaryExp<AIRExp> e = (ASTBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTCmpBinaryExp<AIRExp>(c, m, e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cmpExp",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // notExp ::= cmpExp 
            {
              ASTLogBinaryExp<AIRExp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTCmpBinaryExp<AIRExp> c = (ASTCmpBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("notExp",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // notExp ::= NOT cmpExp 
            {
              ASTLogBinaryExp<AIRExp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTCmpBinaryExp<AIRExp> c = (ASTCmpBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTUnaryExp<AIRExp>("not", e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("notExp",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // andExp ::= notExp 
            {
              ASTLogBinaryExp<AIRExp> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTLogBinaryExp<AIRExp> n = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = n; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("andExp",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // andExp ::= andExp AND notExp 
            {
              ASTLogBinaryExp<AIRExp> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTLogBinaryExp<AIRExp> a = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTLogBinaryExp<AIRExp> n = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTLogBinaryExp<AIRExp>(a, "and", n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("andExp",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // orExp ::= andExp 
            {
              ASTLogBinaryExp<AIRExp> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTLogBinaryExp<AIRExp> a = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("orExp",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // orExp ::= orExp OR andExp 
            {
              ASTLogBinaryExp<AIRExp> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTLogBinaryExp<AIRExp> o = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTLogBinaryExp<AIRExp> a = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ASTLogBinaryExp<AIRExp>(o, "or", a); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("orExp",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // pairQExp ::= PAIR QUERY LPAREN tlExp RPAREN 
            {
              SMPLPairQuery RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp tl = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLPairQuery(tl); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairQExp",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // pairExp ::= PAIR LPAREN tlExp COMMA tlExp RPAREN 
            {
              SMPLPairExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTExp p1 = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp p2 = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLPairExp(p1,p2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairExp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // substrExp ::= SUBSTR LPAREN tlExp COMMA tlExp COMMA tlExp RPAREN 
            {
              SMPLSubstrExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTExp i = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp n = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLSubstrExp(t, i, n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("substrExp",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // equalExp ::= EQUAL LPAREN tlExp COMMA tlExp RPAREN 
            {
              SMPLEqualExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTExp e1 = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp e2 = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLEqualExp(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("equalExp",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // eqvExp ::= EQV LPAREN tlExp COMMA tlExp RPAREN 
            {
              SMPLEqvExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTExp e1 = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp e2 = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLEqvExp(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("eqvExp",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // vecSizeExp ::= SIZE LPAREN tlExp RPAREN 
            {
              SMPLVecSizeExp RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp ve = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLVecSizeExp(ve); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vecSizeExp",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // vecNExp ::= tlExp LBRACKET tlExp RBRACKET 
            {
              SMPLVecNExp RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTExp ve = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp n = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLVecNExp(ve,n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vecNExp",41, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // vecList ::= empty 
            {
              SMPLVecList RESULT =null;
		 RESULT = new SMPLVecList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vecList",43, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // vecList ::= vecList COMMA tlExp 
            {
              SMPLVecList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SMPLVecList v = (SMPLVecList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp val = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
           		vecEntry = new VecEntry(val);
                v.addEntry(val);
                RESULT = v; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vecList",43, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // vecList ::= vecList COMMA tlExp COLON tlExp 
            {
              SMPLVecList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		SMPLVecList v = (SMPLVecList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp size = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp val = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
            	vecEntry = new VecEntry(size, val);
            	v.addEntry(size, val);
				RESULT = v; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vecList",43, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // vecStmt ::= VECHEAD vecList VECEND 
            {
              SMPLVecStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLVecList v = (SMPLVecList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLVecStmt(v); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vecStmt",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // concatExp ::= listExp CON listExp 
            {
              SMPLConcatExp RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SMPLListExp cp = (SMPLListExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLListExp le = (SMPLListExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLConcatExp(cp, le); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("concatExp",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listExp ::= ELIST 
            {
              SMPLListExp RESULT =null;
		 RESULT = new SMPLListExp(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("listExp",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listExp ::= LBRACKET expList RBRACKET 
            {
              SMPLListExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<ASTExp> e = (ArrayList<ASTExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLListExp(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("listExp",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listExp ::= LIST LPAREN expList RPAREN 
            {
              SMPLListExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<ASTExp> e = (ArrayList<ASTExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLListExp(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("listExp",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tlExp ::= listExp 
            {
              ASTExp RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLListExp le = (SMPLListExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = le; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tlExp ::= readStmt 
            {
              ASTExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLReadStmt re = (SMPLReadStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = re; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tlExp ::= concatExp 
            {
              ASTExp RESULT =null;
		int cceleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cceright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLConcatExp cce = (SMPLConcatExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = cce; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tlExp ::= vecStmt 
            {
              ASTExp RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int veright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLVecStmt ve = (SMPLVecStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = ve; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tlExp ::= funDef 
            {
              ASTExp RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLProcExp fd = (SMPLProcExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = fd; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tlExp ::= orExp 
            {
              ASTExp RESULT =null;
		int oeleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTLogBinaryExp<AIRExp> oe = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = oe; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tlExp",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // readStmt ::= READINT LPAREN RPAREN 
            {
              SMPLReadStmt RESULT =null;
		 RESULT = new SMPLReadStmt("%i"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("readStmt",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // readStmt ::= READ LPAREN RPAREN 
            {
              SMPLReadStmt RESULT =null;
		RESULT = new SMPLReadStmt("%s"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("readStmt",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // letExp ::= LET LPAREN bindList RPAREN stmtList 
            {
              SMPLLetExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SMPLBindExp> b = (ArrayList<SMPLBindExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLSequence s = (SMPLSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLLetExp(b, s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("letExp",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lazyExp ::= LAZY LPAREN tlExp RPAREN 
            {
              SMPLLazyExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLLazyExp(t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("lazyExp",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // callExp ::= CALL LPAREN funDef COMMA listExp RPAREN 
            {
              SMPLCallExp RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SMPLProcExp fn = (SMPLProcExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLListExp lst = (SMPLListExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLCallExp(fn, lst); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("callExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bindList ::= empty 
            {
              ArrayList<SMPLBindExp> RESULT =null;
		 RESULT = new ArrayList<SMPLBindExp>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindList",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bindList ::= bindList bindExp 
            {
              ArrayList<SMPLBindExp> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SMPLBindExp> bl = (ArrayList<SMPLBindExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLBindExp b = (SMPLBindExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
			bl.add(b);
			RESULT = bl; 
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindList",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bindExp ::= VAR BE tlExp 
            {
              SMPLBindExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLBindExp(v, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funDef ::= PROC VAR stmtList 
            {
              SMPLProcExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLSequence s = (SMPLSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLProcExp(id, s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funDef",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funDef ::= PROC LPAREN paramList DOT paramList RPAREN stmtList 
            {
              SMPLProcExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<String> p1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> p2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLSequence s = (SMPLSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLProcExp(p, p, s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funDef",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funDef ::= PROC LPAREN paramList RPAREN stmtList 
            {
              SMPLProcExp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLSequence s = (SMPLSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLProcExp(p, s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("funDef",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // define ::= DEF VAR tlExp 
            {
              SMPLDefine RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLDefine(v,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("define",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // printStatement ::= PRINTLN tlExp 
            {
              SMPLPrintStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLPrintStmt("\n", e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("printStatement",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // printStatement ::= PRINT tlExp 
            {
              SMPLPrintStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLPrintStmt("", e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("printStatement",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // multiassign ::= expList ASSIGN tlExp 
            {
              SMPLMultiAssign RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<ASTExp> vl = (ArrayList<ASTExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp c = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLMultiAssign(vl,c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("multiassign",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assignment ::= VAR ASSIGN tlExp 
            {
              SMPLAssignment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp c = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		RESULT = new ExpAssign(v, c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // waitStmt ::= WAIT tlExp 
            {
              SMPLStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		RESULT = new SMPLWaitStmt(t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("waitStmt",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // predConList ::= empty 
            {
              ArrayList<SMPLPredConExp> RESULT =null;
		 RESULT = new ArrayList<SMPLPredConExp>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("predConList",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // predConList ::= predConList COMMA predConExp 
            {
              ArrayList<SMPLPredConExp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SMPLPredConExp> l = (ArrayList<SMPLPredConExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLPredConExp e = (SMPLPredConExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
			l.add(e);
			RESULT = l; 
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("predConList",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // predConExp ::= orExp COLON stmtList 
            {
              SMPLPredConExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTLogBinaryExp<AIRExp> n = (ASTLogBinaryExp<AIRExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLSequence t = (SMPLSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLPredConExp(n, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("predConExp",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // caseStmt ::= CASE LCBRACKET predConList RCBRACKET 
            {
              SMPLCaseStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SMPLPredConExp> p = (ArrayList<SMPLPredConExp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SMPLCaseStmt(p); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("caseStmt",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ifstatement ::= IF tlExp THEN stmtList ELSE stmtList 
            {
              SMPLIfStmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ASTExp c = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SMPLSequence s = (SMPLSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLSequence l = (SMPLSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new  SMPLIfStmt(c, s, l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifstatement",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ifstatement ::= IF tlExp THEN stmtList 
            {
              SMPLIfStmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTExp c = (ASTExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLSequence s = (SMPLSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 new SMPLIfStmt(c, s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifstatement",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= funDef SEMI 
            {
              SMPLStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLProcExp f = (SMPLProcExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = fd; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= define SEMI 
            {
              SMPLStatement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLDefine d = (SMPLDefine)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= caseStmt SEMI 
            {
              SMPLStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLCaseStmt c = (SMPLCaseStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= ifstatement SEMI 
            {
              SMPLStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLIfStmt i = (SMPLIfStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= waitStmt SEMI 
            {
              SMPLStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLStatement w = (SMPLStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = w; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= printStatement SEMI 
            {
              SMPLStatement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLPrintStmt p = (SMPLPrintStmt)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= multiassign SEMI 
            {
              SMPLStatement RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLMultiAssign ma = (SMPLMultiAssign)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = ma; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= assignment SEMI 
            {
              SMPLStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLAssignment a = (SMPLAssignment)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= empty 
            {
              SMPLSequence RESULT =null;
		 RESULT = new SMPLSequence(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              SMPLSequence RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLSequence seq = (SMPLSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLStatement s = (SMPLStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
				seq.addStatement(s);
		    	RESULT = seq; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmtList 
            {
              SMPLProgram RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLSequence seq = (SMPLSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new SMPLProgram(seq);
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLProgram start_val = (SMPLProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

